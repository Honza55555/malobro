import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import CommandStart

API_TOKEN = "YOUR_BOT_TOKEN_HERE"
MANAGER_USERNAME = "@Netvfsss"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class OrderForm(StatesGroup):
    waiting_for_criteria = State()
    waiting_for_payment_confirmation = State()

services = {
    "?????????? ???????": "????, ???????, ???? ???????? ?? ??????",
    "??????? ??????????????": "?????, ????, ?????",
    "??????? ????????": "???????, ????????, ????",
    "??????? ????????": "????, ????????",
    "?????? ??????????": "????, ???????, ???????",
    "??????": "??????, ?????, ??????"
}

@dp.message_handler(CommandStart())
async def send_welcome(message: types.Message):
    markup = InlineKeyboardMarkup()
    for service in services:
        markup.add(InlineKeyboardButton(service, callback_data=service))
    price_list = (
        "?? ????????? ????? ?????:

"
        "- ?????????? ???????? YouTube/VK/Telegram (????? + ????????) � 150 ??\n"
        "- ??????? ?????????????? � 200 ??\n"
        "- ??????? ???????? � 100 ??\n"
        "- ??????? ???????? � 50 ??\n"
        "- ?????? ?????????? � 200 ??\n"
        "- ?????? � 10 ??\n\n"
        "?? ??????: ???????? / ???\n"
    )
    await message.answer("?? ????? ??????????! ??? ??? ?????-????:

" + price_list, reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data in services)
async def service_chosen(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(service=callback_query.data)
    criteria = services[callback_query.data]
    await bot.send_message(callback_query.from_user.id, f"?? ??????????, ???????:\n{criteria}")
    await OrderForm.waiting_for_criteria.set()

@dp.message_handler(state=OrderForm.waiting_for_criteria, content_types=types.ContentTypes.TEXT)
async def receive_criteria(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    # P�epo�le krit�ria spr�vci
    await bot.send_message(MANAGER_USERNAME, f"?? ????? ????? ?? @{message.from_user.username or message.from_user.id}\n"
                                             f"???: {user_data['service']}\n"
                                             f"????????:\n{message.text}")
    # Po�le platebn� �daje u�ivateli
    await bot.send_message(message.chat.id, "? ???????! ??? ????????? ??? ??????:\n\n"
                                            "?? ?????????? ????? ????????: 2200 7019 7390 6727 (????? ?.)\n"
                                            "?? ???: +7 (978) 250-89-11 (?????? ???? ?????)\n\n"
                                            "????? ?????? ????????? ???????? ??? ?????????.")
    await OrderForm.waiting_for_payment_confirmation.set()

@dp.message_handler(state=OrderForm.waiting_for_payment_confirmation, content_types=types.ContentTypes.ANY)
async def payment_confirmation(message: types.Message, state: FSMContext):
    # Potvrzen� u�ivateli
    await bot.send_message(message.chat.id, "? ??????? ?? ??????! ??? ????? ????? ????? ? ??????? 1 ???? � 5 ?????.")
    # P�epo�le screenshot nebo zpr�vu spr�vci
    if message.photo:
        photo = message.photo[-1]
        await bot.send_photo(MANAGER_USERNAME, photo.file_id, caption=f"?? ????????????? ?????? ?? @{message.from_user.username or message.from_user.id}")
    else:
        await bot.send_message(MANAGER_USERNAME, f"?? ????????????? ?????? ?? @{message.from_user.username or message.from_user.id}\n?????????:\n{message.text}")
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

